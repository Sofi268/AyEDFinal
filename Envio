template <class T> class Envio{
    private:
        Lista<T>* veciRout;
        Lista<Terminal<T>*>* terminalesRout;
    public:
        Envio(void){};
        Envio(Lista<T>* vecinos, Lista<Terminal<T>*>* terminales);
        ~Envio(void){};
        void enviarDirecto(Paquete* paquete);
        T* buscarRouter(int router, Lista<T>* vecinosRout);

};

template <class T> Envio<T>::Envio(Lista<T>* vecinos, Lista<Terminal<T>*>* terminales)
{
    veciRout = vecinos;
    terminalesRout = terminales;
}

//Envio directo de los paquetes generados por el propio router
template <class T> void Envio<T>::enviarDirecto(Paquete* paquete)
{
    int sigRouter = paquete->getSigRouter();
    buscarRouter(sigRouter, veciRout)->recibirPaquete(paquete);
}

template <class T> T* Envio<T>::buscarRouter(int router, Lista<T>* vecinosRout)
{
    if(vecinosRout->cabeza().getID() == router){
        return vecinosRout->cabeza();
    }
    else buscar(router, vecinosRout->resto());
}
