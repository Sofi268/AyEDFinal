//---------------------------------------------------------Terminal--------------------------------------------------------------
template <class T> class Terminal  {
private:
    int numTerminal;
    int numRouter;
    T routerAsociado;
    bitset <16> direccionMaquina;
    Pagina* paginaEnviar;
    Lista<Pagina*>* paginasRecibidas;
    int numMaqGnral;


public:
    Terminal(void){};
    Terminal(int numeroMaquina, int numeroRouter, T router, int numMaqGeneral);

    //Getters
    int getNumeroTerminal(void){return numTerminal;};
    int getNumeroRouter(void){return numRouter;};
    T getRouterAsociado(void){return routerAsociado;};
    bitset<16> getDirecMaquina(void){return direccionMaquina;};
    int getNumMaqGeneral(void){return numMaqGnral;}

    bitset<16> setDireccion(int maq,  int rout);

    Pagina* generarPaginaAleatoria(Lista<T>* rout,int cantidadRout, int numPag, int numTerminalFinal, int numRoutFinal,int numMaqGnralFinal, int tamanio);
    void enviarPagina(Lista<T>* rout,int cantidadRout, int numPag, int numMaqFinal, int numRoutFinal, int numMaqGnralFinal, int tamanio);
    void recibirPagina(Pagina* pag);
    void imprimirRecepcion(Pagina* pag);
};

template <class T> Terminal<T>::Terminal(int numeroMaquina, int numeroRouter, T router, int numMaqGeneral)
{
    numTerminal = numeroMaquina;
    numRouter = numeroRouter;
    routerAsociado = router;
    direccionMaquina = setDireccion(numeroMaquina, numeroRouter);
    paginasRecibidas = new Lista<Pagina*>;
    numMaqGnral = numMaqGeneral;
}

template<class T> bitset<16> Terminal<T>::setDireccion(int maq, int rout)
{
    bitset<16> a (maq);
    bitset<16> b (rout);
    (a<<=8);
    bitset<16> direcMaquina = (a|b);
    return direcMaquina;
}

//Generar Pagina a enviar

template <class T> Pagina* Terminal<T>::generarPaginaAleatoria(Lista<T>* rout,int cantidadRout, int numPag, int numeroTerminalFinal, int numeroRoutFinal,int numMaqGnralFinal, int tamanio)
{   
    int tamanioPag = tamanio;
    int numTerminalFinal = numeroTerminalFinal;
    int numRoutFinal = numeroRoutFinal;
    int routOrigen = numRouter;
    bitset<16> IPdest = setDireccion(numTerminalFinal, numRoutFinal);
    Pagina* nueva = new Pagina(numTerminal, routOrigen, numTerminalFinal,numRoutFinal, tamanioPag, numPag, direccionMaquina, IPdest, numMaqGnral, numMaqGnralFinal);
    return nueva;
}

//Crear la pagina y luego enviarla al router asociado
template<class T> void Terminal<T>::enviarPagina(Lista<T>* rout,int cantidadRout, int numPag, int numMaqFinal, int numRoutFinal,int numMaqGnralD, int tamanio)
{
    paginaEnviar = generarPaginaAleatoria(rout, cantidadRout, numPag, numMaqFinal, numRoutFinal,numMaqGnralD, tamanio);
    routerAsociado->recibirPagina(paginaEnviar);
}

//Recibir pagina enviada
template<class T> void Terminal<T>::recibirPagina(Pagina* pag)
{
    paginasRecibidas->add(pag);
    imprimirRecepcion(pag);
}

template<class T> void Terminal<T>::imprimirRecepcion(Pagina* pag)
{
    cout<<endl<<endl;
    cout<<"La maquina "<<numTerminal<<" recibio exitosamente la pagina numero: "<<pag->getNumeroPagina()<<endl;
    cout<<"Direccion de envio: "<<pag->getIPorigen()<<endl;
    cout<<"Direccion de destino: "<<pag->getIPdestino()<<endl;
    cout<<endl<<endl;
}
