class Router{
private:
    int ID;
    int anchoBanda;
    int cantidadVecinos;
    int cantidadTerminales;
    Lista<Router*>* vecinos;
    Lista<Terminal<Router*>*>* terminales;
    Lista<Cola<Paquete*>*>* colasTrafico;
    Lista<Cola<Paquete*>*>* colasEspera;
    Lista<Lista<Lista<Paquete*>*>*>* listasTerminales;
    Lista<int>* numVecinos;
    GestionVecinos* gestionVecinos;
    Camino<Router*>* camino;

public:
    Router(void){};
    Router(int id);
    ~Router(void){};

    //Gettters
    int getID(void){return ID;};
    int getAnchoBanda(void){return anchoBanda;};
    int getCantidadVecinos(void){return cantidadVecinos;};
    int getCantidadTerminales(void){return cantidadTerminales;};
    Lista<Router*>* getVecinos(void){return vecinos;};
    Lista<Terminal<Router*>*>* getTerminales(void){return terminales;};
    Lista<Cola<Paquete*>*>* getColasEspera(void){return colasEspera;};
    Lista<Cola<Paquete*>*>* getColasTrafico(void){return colasTrafico;};
    Lista<Lista<Lista<Paquete*>*>*>* getListasTerminales(void){return listasTerminales;};
    Lista<int>* getNumVecinos(void){return numVecinos;};

    //Setters
    void setNuevoVecino(Router* vecino);
    void setNuevaTerminal(Terminal<Router*>* terminal);

    //Busqueda
    Router* buscarRouter(int ID,Lista<Router*>* vecinos);
    Terminal<Router*>* buscarTerminal(int ID, Lista<Terminal<Router*>*>* terminales);

    //Recibir Pagina y crear Paquetes
    void recibirPagina(Pagina* pagina);
    void armadoDePaquetes(Pagina* pagina);
    void setCamino(Paquete* paquete);
    void enviarDirecto(Paquete* paquete);

    //Reconstruccion y envio de pagina
    void recibirPaqueteFinal(Paquete* paquete);
    void reconstruirPagina(Lista<Paquete*>* paquetes);
    Lista<Paquete*>* ordenarPaquetes(Lista<Paquete*>* paquetes);
    void enviarPagina(Pagina* pagina);

    //Recepcion de Paquetes y reenvio
    void recibirPaquete(Paquete* paquete); 
    void recibirPaqueteVecino(Paquete* paquete); //Uso gestion de vecinos
    void ciclo();
    bool comprobarPaqueteCola(Paquete* paquete);
    void enviarPaqueteVecino(Paquete* paquete);

};

Router::Router(int id)
{
    ID = id;
    cantidadVecinos = 0;
    cantidadTerminales = 0;
    vecinos = new Lista<Router*>();
    terminales = new Lista<Terminal<Router*>*>();
    colasTrafico = new Lista<Cola<Paquete*>*>();
    colasEspera = new Lista<Cola<Paquete*>*>();
    listasTerminales = new Lista<Lista<Lista<Paquete*>*>*>();
    numVecinos = new Lista<int>();
    gestionVecinos = new GestionVecinos(colasEspera, colasTrafico);
    camino = new Camino<Router*>();
}

void Router::setNuevoVecino(Router* vecino)
{
    vecinos->add(vecino);
    numVecinos->add(vecino->getID());
    cantidadVecinos++;
}

void Router::setNuevaTerminal(Terminal<Router*>* terminal)
{
    terminales->add(terminal);
    cantidadTerminales++;
}

Router* Router::buscarRouter(int ID, Lista<Router*>* vecinos)
{   
    if(vecinos->cabeza()->getID() == ID){
        return vecinos->cabeza();
    }
    if(vecinos->esVacia()) return nullptr;
    else return buscarRouter(ID, vecinos->resto());
}

Terminal<Router*>* Router::buscarTerminal(int ID, Lista<Terminal<Router*>*>* terminales)
{
    if(terminales->cabeza()->getNumeroMaq() == ID){
        return terminales->cabeza();
    }
    else return buscarTerminal(ID, terminales->resto());
}

void Router::recibirPagina(Pagina* pagina)
{
    armadoDePaquetes(pagina);
}

void Router::armadoDePaquetes(Pagina* pagina)
{
    int cantidadPaquetes = pagina->getTamanoPagina();
    for(int i= 0; i<cantidadPaquetes; i++){
        Paquete* paquete = new Paquete(pagina->getNumMaqOrigen(),pagina->getRoutOrigen(), pagina->getNumMaqFinal(), pagina->getRoutFinal(), ID, pagina->getTamanoPagina(), pagina->getNumeroPagina(), i+1, pagina->getIPorigen(),pagina->getIPdestino());
        setCamino(paquete);
        enviarDirecto(paquete);
    }
}

void Router::setCamino(Paquete* paquete)
{
    camino->setCamino(paquete);
}

void Router::enviarDirecto(Paquete* paquete)
{
    int sigRouter = paquete->getSigRouter();
    buscarRouter(sigRouter, vecinos)->recibirPaquete(paquete);
}

// void Router::reconstruirPagina(Lista<Paquete*>* paquetes)
// {
//     Paquete* paquetesOrdenados[paquetes->size()] = ordenarPaquetes(paquetes);
//     Paquete* paqAux = paquetesOrdenados;
//     Pagina* pagina = new Pagina(paqAux->getMaquinaOrigen(), paqAux->getRouterOrigen(), paqAux->getMaquinaFinal(),paqAux->getRouterFinal(),paqAux->getCantiTotalPaq(),paqAux->getNumPag(),paqAux->getIPorigen(), paqAux->getIPdestino());
//     enviarPagina(pagina);
// }

// Paquete*[] Router::ordenarPaquetes(Lista<Paquete*>* paquetes)
// {
//     Paquete* arregloPaquetes[paquetes->size()];
//     for(int i=0 ; i<paquetes->size(); i++){

//     }
// }

void Router::enviarPagina(Pagina* pagina)
{
    int maqDestino = pagina->getNumMaqFinal();
    buscarTerminal(maqDestino, terminales)->recibirPagina(pagina);
}

void Router::recibirPaquete(Paquete* paquete)
{
    paquete->borrarElemCamino();
    if(paquete->getRouterFinal()==ID){
        recibirPaqueteFinal(paquete);
    }
    else recibirPaqueteVecino(paquete);
}

void Router::recibirPaqueteFinal(Paquete* paquete)
{

}

void Router::recibirPaqueteVecino(Paquete* paquete)
{
    if(comprobarPaqueteCola(paquete)){

    }
}

void Router::ciclo()
{

}

bool Router::comprobarPaqueteCola(Paquete* paquete)
{

}

void Router::enviarPaqueteVecino(Paquete* paquete)
{

}
